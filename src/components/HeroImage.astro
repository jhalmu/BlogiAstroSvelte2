---
interface Props {
  image: {
    src: string
    alt: string
    width?: number
    height?: number
  }
  overlayOpacity?: number
  tintColor?: string
  height?: string
  priority?: boolean
  title: string
  lastUpdated?: string
  tags?: string[]
  author?: string
}

const {
  image,
  overlayOpacity = 40,
  tintColor = 'rgb(167, 139, 250)',
  height = 'h-[280px]',
  priority = false,
  title,
  lastUpdated,
  tags = [],
  author,
} = Astro.props

console.log('HeroImage props:', { title, author, tags, lastUpdated })

// Format the date nicely
const formatDate = (dateString: string) => {
  if (!dateString) return ''
  const date = new Date(dateString)
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date)
}

const formattedDate = lastUpdated ? formatDate(lastUpdated) : ''
---

<div class='container mx-auto px-4 mt-4'>
  <section
    class='relative py-8 overflow-hidden rounded-3xl w-full min-h-[200px] flex items-center justify-center bg-gradient-to-br from-purple-700 to-blue-600'
    aria-labelledby='hero-title'
  >
    {/* Background image */}
    <img
      src={image.src}
      alt=''
      width={image.width}
      height={image.height}
      class={`absolute inset-0 w-full ${height} object-cover mix-blend-overlay opacity-50 rounded-3xl`}
      loading={priority ? 'eager' : 'lazy'}
      decoding={priority ? 'sync' : 'async'}
      aria-hidden='true'
    />

    {/* Content overlay */}
    <div class='relative z-10 w-full max-w-4xl mx-auto px-4'>
      <div class='text-center'>
        <h1
          id='hero-title'
          class='font-montserrat font-bold text-3xl md:text-4xl lg:text-5xl text-white mb-3 leading-tight'
        >
          {title}
        </h1>

        {/* Author */}
        {author && (
          <div class="mb-4 flex items-center justify-center">
            <span class="text-white/90 text-lg font-montserrat flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
              </svg>
              {author}
            </span>
          </div>
        )}

        {/* Tags */}
        {
          tags && tags.length > 0 && (
            <div
              class='flex flex-wrap gap-2 justify-center mb-3'
              role='list'
              aria-label='Post tags'
            >
              {tags.map((tag) => (
                <span
                  class='px-3 py-1 bg-white/20 text-white rounded-full text-sm backdrop-blur-sm'
                  role='listitem'
                >
                  {tag}
                </span>
              ))}
            </div>
          )
        }

        {/* Last Updated */}
        {
          formattedDate && (
            <time datetime={lastUpdated} class='text-white/80 text-sm block'>
              Last updated: {formattedDate}
            </time>
          )
        }
      </div>
    </div>
  </section>
</div>

<style>
  .text-shadow {
    text-shadow:
      0 2px 4px rgba(0, 0, 0, 0.3),
      0 4px 8px rgba(0, 0, 0, 0.2);
  }
</style>
