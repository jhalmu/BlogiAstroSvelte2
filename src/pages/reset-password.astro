---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Reset Password - Juha Halmun Sanatoorio">
  <main class="min-h-screen py-12 px-6">
    <div class="max-w-md mx-auto bg-white p-8 rounded-lg shadow-lg">
      <h1 class="text-3xl font-bold text-center text-purple-900 mb-8">Reset Password</h1>
      
      <div id="successMessage" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
      </div>

      <div id="errorMessage" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">
      </div>
      
      <form id="resetPasswordForm" class="space-y-6">
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
            New Password
          </label>
          <input
            type="password"
            id="password"
            name="password"
            required
            minlength="8"
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
          />
          <p class="mt-1 text-sm text-gray-500">
            Minimum 8 characters
          </p>
        </div>

        <div>
          <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">
            Confirm Password
          </label>
          <input
            type="password"
            id="confirmPassword"
            name="confirmPassword"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
          />
        </div>

        <button
          type="submit"
          id="submitButton"
          class="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200 flex items-center justify-center"
        >
          <span>Reset Password</span>
          <svg id="loadingIcon" class="hidden animate-spin ml-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </form>
    </div>
  </main>
</Layout>

<script>
  const form = document.getElementById('resetPasswordForm') as HTMLFormElement;
  const errorDiv = document.getElementById('errorMessage');
  const successDiv = document.getElementById('successMessage');
  const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
  const loadingIcon = document.getElementById('loadingIcon');

  // Get token from URL
  const urlParams = new URLSearchParams(window.location.search);
  const token = urlParams.get('token');

  if (!token) {
    if (errorDiv) {
      errorDiv.textContent = 'Invalid reset link. Please request a new password reset.';
      errorDiv.classList.remove('hidden');
    }
    if (submitButton) {
      submitButton.disabled = true;
    }
  }

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (submitButton) {
        submitButton.disabled = true;
        loadingIcon?.classList.remove('hidden');
      }

      if (errorDiv) errorDiv.classList.add('hidden');
      if (successDiv) successDiv.classList.add('hidden');
      
      try {
        const password = (form.elements.namedItem('password') as HTMLInputElement).value;
        const confirmPassword = (form.elements.namedItem('confirmPassword') as HTMLInputElement).value;

        if (password !== confirmPassword) {
          throw new Error('Passwords do not match');
        }

        if (password.length < 8) {
          throw new Error('Password must be at least 8 characters long');
        }
        
        const response = await fetch('/api/auth/reset-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ token, password })
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
          if (successDiv) {
            successDiv.textContent = data.message;
            successDiv.classList.remove('hidden');
          }
          form.reset();
          
          // Redirect to login after 3 seconds
          setTimeout(() => {
            window.location.href = '/login';
          }, 3000);
        } else {
          throw new Error(data.message || 'Failed to reset password');
        }
      } catch (error) {
        if (errorDiv) {
          errorDiv.textContent = error.message || 'An error occurred. Please try again.';
          errorDiv.classList.remove('hidden');
        }
      } finally {
        if (submitButton) {
          submitButton.disabled = false;
          loadingIcon?.classList.add('hidden');
        }
      }
    });
  }

  // Add password validation
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmInput = document.getElementById('confirmPassword') as HTMLInputElement;

  if (passwordInput && confirmInput) {
    const validatePasswords = () => {
      const password = passwordInput.value;
      const confirm = confirmInput.value;

      if (password.length < 8) {
        passwordInput.setCustomValidity('Password must be at least 8 characters long');
      } else {
        passwordInput.setCustomValidity('');
      }

      if (password !== confirm) {
        confirmInput.setCustomValidity('Passwords do not match');
      } else {
        confirmInput.setCustomValidity('');
      }
    };

    passwordInput.addEventListener('input', validatePasswords);
    confirmInput.addEventListener('input', validatePasswords);
  }
</script>
