---
import Layout from '../../layouts/Layout.astro';
import BlogCard from '../../components/BlogCard.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import Pagination from '../../components/Pagination.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const POSTS_PER_PAGE = 6;
  const posts = (await getCollection('blog'))
    .sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

  const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages - 1 }, (_, i) => {
    const page = i + 2; // Start from page 2
    const start = (page - 1) * POSTS_PER_PAGE;
    const end = start + POSTS_PER_PAGE;
    const pagePosts = posts.slice(start, end);

    // Get previous and next post titles for navigation
    const prevPageStart = (page - 2) * POSTS_PER_PAGE;
    const nextPageStart = page * POSTS_PER_PAGE;
    const prevPageTitle = posts[prevPageStart]?.data.title;
    const nextPageTitle = posts[nextPageStart]?.data.title;

    return {
      params: { page: String(page) },
      props: {
        posts: pagePosts,
        page,
        totalPages,
        allTags: [...new Set(posts.flatMap(post => post.data.tags || []))].sort(),
        prevPageTitle,
        nextPageTitle
      }
    };
  });
}

const { page, posts, totalPages, allTags, prevPageTitle, nextPageTitle } = Astro.props;

// Get the blog page content
const blogPage = (await getCollection('pages')).find(p => p.slug === 'blog');

const breadcrumbPaths = [
  { label: 'Home', href: '/' },
  { label: 'Blog', href: '/blog' },
  { label: `Page ${page}` }
];

// Set up navigation links
const prevPage = prevPageTitle ? {
  url: page === 2 ? '/blog' : `/blog/${page - 1}`,
  title: prevPageTitle
} : undefined;

const nextPage = nextPageTitle ? {
  url: `/blog/${page + 1}`,
  title: nextPageTitle
} : undefined;
---

<Layout title={`Blog Posts - Page ${page}`}>
  <article class="max-w-4xl mx-auto px-4 py-12">
    <Breadcrumb 
      paths={breadcrumbPaths}
      prevPage={prevPage}
      nextPage={nextPage}
    />
    
    <div class="flex flex-col md:flex-row justify-between items-start gap-8 mb-12">
      <header>
        <h1 class="text-4xl md:text-5xl font-poppins font-bold text-purple-900 mb-4">
          {blogPage.data.title}
        </h1>
        <p class="text-gray-600 text-lg">
          {blogPage.data.description}
        </p>
      </header>

      {allTags.length > 0 && (
        <div class="w-full md:w-auto">
          <h2 class="text-xl font-poppins font-semibold text-purple-800 mb-4">Filter by Tags</h2>
          <div class="flex flex-wrap gap-2">
            {allTags.map(tag => (
              <button
                class="px-4 py-2 rounded-full bg-purple-100 text-purple-800 hover:bg-purple-200 transition-colors duration-300"
                data-tag={tag}
              >
                {tag}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {posts.map((post) => (
        <BlogCard
          title={post.data.title}
          excerpt={post.data.excerpt}
          content={post.body}
          date={new Date(post.data.date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
          slug={post.slug}
          tags={post.data.tags || []}
        />
      ))}
      {posts.length === 0 && (
        <div class="col-span-full text-center py-12 text-gray-500">
          No blog posts found.
        </div>
      )}
    </div>

    <Pagination
      currentPage={page}
      totalPages={totalPages}
      baseUrl="/blog"
    />
  </article>
</Layout>

<style>
  button[data-tag].active {
    @apply bg-purple-700 text-white;
  }
</style>

<script>
  // Client-side filtering
  const buttons = document.querySelectorAll<HTMLButtonElement>('button[data-tag]');
  const cards = document.querySelectorAll<HTMLElement>('.grid > article');
  let activeTag: string | null = null;

  buttons.forEach(button => {
    button.addEventListener('click', () => {
      const tag = button.getAttribute('data-tag');
      if (!tag) return;
      
      // Toggle active state
      if (activeTag === tag) {
        // Deactivate current tag
        button.classList.remove('active');
        activeTag = null;
        // Show all cards
        cards.forEach(card => {
          card.style.display = '';
        });
      } else {
        // Deactivate previous tag
        buttons.forEach(b => b.classList.remove('active'));
        // Activate new tag
        button.classList.add('active');
        activeTag = tag;
        // Filter cards
        cards.forEach(card => {
          const cardTagsAttr = card.getAttribute('data-tags');
          const cardTags = cardTagsAttr ? JSON.parse(cardTagsAttr) : [];
          card.style.display = cardTags.includes(tag) ? '' : 'none';
        });
      }
    });
  });
</script>
